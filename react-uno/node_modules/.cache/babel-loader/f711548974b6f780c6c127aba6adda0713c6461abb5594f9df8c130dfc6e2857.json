{"ast":null,"code":"import { play, rotatePlayers } from \"./Players\";\n\n/**\r\n * card constructor\r\n * @param {*} color\r\n * @param {*} value\r\n */\n//Change out any document.getElementById to the react way\nexport function Card(color, value) {\n  this.color = color;\n  this.value = value;\n  this.getColorValue = function () {\n    switch (this.color) {\n      case \"Red\":\n        return \"#A60000\";\n      case \"Blue\":\n        return \"#0000FF\";\n      case \"Green\":\n        return \"#004f19\";\n      case \"Yellow\":\n        return \"#e5bf00\";\n      default:\n        return \"#333333\";\n    }\n  };\n}\n\n/**\r\n * Function draws a specific card for cheat\r\n */\n/* export function drawSpecificCard(players, gameTurn, cardColor, cardValue) {\r\n\tplayers[gameTurn].playerDeck.drawSpecificCard(cardColor, cardValue);\r\n} */\n\n/**\r\n * Function draws a specific card for cheat code\r\n */\n/* export function removeManyCards(players, gameTurn, numberOfCards) {\r\n\tif (numberOfCards > players[gameTurn].playerDeck.amtCards - 2) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (let i = 0; i < numberOfCards; i++) {\r\n\t\tplayers[gameTurn].playerDeck.removeCard(0);\r\n\t}\r\n\tplayers[gameTurn].playerDeck.reloadHand();\r\n} */\n\n/**\r\n * Function draws cards and adds them to playerhand\r\n */\n/* export function drawACard(players, drawStack, gameTurn) {\r\n\tif (drawStack.stackAmt != 0) {\r\n\t\tlet drawTimes = drawStack.cardType * drawStack.stackAmt;\r\n\t\tdrawStack.clearVisual();\r\n\t\tfor (let i = 0; i < drawTimes; i++) {\r\n\t\t\tplayers[gameTurn].playerDeck.drawCard();\r\n\t\t}\r\n\r\n\t\tdrawStack.stackAmt = 0;\r\n\t\trotatePlayers();\r\n\t\tplay(players, gameTurn);\r\n\t} else if (forcePlay()) {\r\n\t\tlet audio = new Audio(\"error.mp3\");\r\n\r\n\t\t// audio.play();\r\n\t} else {\r\n\t\tplayers[gameTurn].playerDeck.drawCard();\r\n\t}\r\n} */\n\n/**\r\n * Changes the global card object to random color/value assignment\r\n */\n/* export function selectPlayfieldCard() {\r\n\tlet colorArray = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\r\n\tlet randColor = colorArray[Math.floor(Math.random() * colorArray.length)];\r\n\tlet randValue = Math.floor(Math.random() * 10);\r\n\tlet tempCard = new Card(randColor, randValue);\r\n\r\n\tdiscard(tempCard);\r\n}\r\n\r\nexport function discard(card, discardPile) {\r\n\tdiscardPile.addCard(card);\r\n\tif (discardPile.cards.length > 5) discardPile.removeCard(0);\r\n}\r\n\r\nexport function forcePlay(players, gameTurn) {\r\n\tfor (let i = 0; i < players[gameTurn].playerDeck.cards.length; i++) {\r\n\t\tif (players[gameTurn].playerDeck.isValid(i)) return true;\r\n\t}\r\n\treturn false;\r\n} */\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["play","rotatePlayers","Card","color","value","getColorValue","_c","$RefreshReg$"],"sources":["C:/Users/hjohnston/OneDrive - Neumont College of Computer Science/Documents/GitHub/React_Uno/react-uno/src/Components/Cards.js"],"sourcesContent":["import { play, rotatePlayers } from \"./Players\";\r\n\r\n/**\r\n * card constructor\r\n * @param {*} color\r\n * @param {*} value\r\n */\r\n//Change out any document.getElementById to the react way\r\nexport function Card(color, value) {\r\n\tthis.color = color;\r\n\tthis.value = value;\r\n\tthis.getColorValue = function () {\r\n\t\tswitch (this.color) {\r\n\t\t\tcase \"Red\":\r\n\t\t\t\treturn \"#A60000\";\r\n\t\t\tcase \"Blue\":\r\n\t\t\t\treturn \"#0000FF\";\r\n\t\t\tcase \"Green\":\r\n\t\t\t\treturn \"#004f19\";\r\n\t\t\tcase \"Yellow\":\r\n\t\t\t\treturn \"#e5bf00\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"#333333\";\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\n\r\n/**\r\n * Function draws a specific card for cheat\r\n */\r\n/* export function drawSpecificCard(players, gameTurn, cardColor, cardValue) {\r\n\tplayers[gameTurn].playerDeck.drawSpecificCard(cardColor, cardValue);\r\n} */\r\n\r\n/**\r\n * Function draws a specific card for cheat code\r\n */\r\n/* export function removeManyCards(players, gameTurn, numberOfCards) {\r\n\tif (numberOfCards > players[gameTurn].playerDeck.amtCards - 2) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (let i = 0; i < numberOfCards; i++) {\r\n\t\tplayers[gameTurn].playerDeck.removeCard(0);\r\n\t}\r\n\tplayers[gameTurn].playerDeck.reloadHand();\r\n} */\r\n\r\n/**\r\n * Function draws cards and adds them to playerhand\r\n */\r\n/* export function drawACard(players, drawStack, gameTurn) {\r\n\tif (drawStack.stackAmt != 0) {\r\n\t\tlet drawTimes = drawStack.cardType * drawStack.stackAmt;\r\n\t\tdrawStack.clearVisual();\r\n\t\tfor (let i = 0; i < drawTimes; i++) {\r\n\t\t\tplayers[gameTurn].playerDeck.drawCard();\r\n\t\t}\r\n\r\n\t\tdrawStack.stackAmt = 0;\r\n\t\trotatePlayers();\r\n\t\tplay(players, gameTurn);\r\n\t} else if (forcePlay()) {\r\n\t\tlet audio = new Audio(\"error.mp3\");\r\n\r\n\t\t// audio.play();\r\n\t} else {\r\n\t\tplayers[gameTurn].playerDeck.drawCard();\r\n\t}\r\n} */\r\n\r\n/**\r\n * Changes the global card object to random color/value assignment\r\n */\r\n/* export function selectPlayfieldCard() {\r\n\tlet colorArray = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\r\n\tlet randColor = colorArray[Math.floor(Math.random() * colorArray.length)];\r\n\tlet randValue = Math.floor(Math.random() * 10);\r\n\tlet tempCard = new Card(randColor, randValue);\r\n\r\n\tdiscard(tempCard);\r\n}\r\n\r\nexport function discard(card, discardPile) {\r\n\tdiscardPile.addCard(card);\r\n\tif (discardPile.cards.length > 5) discardPile.removeCard(0);\r\n}\r\n\r\nexport function forcePlay(players, gameTurn) {\r\n\tfor (let i = 0; i < players[gameTurn].playerDeck.cards.length; i++) {\r\n\t\tif (players[gameTurn].playerDeck.isValid(i)) return true;\r\n\t}\r\n\treturn false;\r\n} */\r\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,WAAW;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAClC,IAAI,CAACD,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,aAAa,GAAG,YAAY;IAChC,QAAQ,IAAI,CAACF,KAAK;MACjB,KAAK,KAAK;QACT,OAAO,SAAS;MACjB,KAAK,MAAM;QACV,OAAO,SAAS;MACjB,KAAK,OAAO;QACX,OAAO,SAAS;MACjB,KAAK,QAAQ;QACZ,OAAO,SAAS;MACjB;QACC,OAAO,SAAS;IAClB;EACD,CAAC;AACF;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBAG,EAAA,GApEgBJ,IAAI;AAAA,IAAAI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}