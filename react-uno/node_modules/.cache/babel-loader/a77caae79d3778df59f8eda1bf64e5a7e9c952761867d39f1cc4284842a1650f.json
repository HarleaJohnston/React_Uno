{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { drawACard } from './Deck';\nfunction Player({\n  deck,\n  id,\n  index,\n  isBot,\n  unoCall\n}) {\n  _s();\n  const [playerDeck, setPlayerDeck] = useState(deck);\n  const botLogic = () => {\n    let numBotCards = playerDeck.amtCards;\n\n    // Bot behavior\n    for (let i = 0; i < numBotCards; i++) {\n      if (playerDeck.isValid(i)) {\n        if (playerDeck.amtCards === 2) {\n          unoCall(true);\n        }\n        playerDeck.playCard(i);\n        setPlayerDeck({\n          ...playerDeck\n        });\n        return;\n      }\n    }\n\n    // Draw a card if the draw stack is not empty\n    if (drawStack.stackAmt !== 0) {\n      drawACard();\n    } else {\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\n        drawACard();\n      }\n    }\n    setGameState(prev => ({\n      ...prev\n    }));\n  };\n  const handleRotatePlayers = () => {\n    rotatePlayers();\n    setGameState(prev => ({\n      ...prev,\n      gameTurn\n    }));\n  };\n}\n\n// not originally here from index.js(game.js)\n/* export function play(players, gameTurn) {\r\n\tif (players[gameTurn].isBot) {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t\tplayers[gameTurn].botLogic();\r\n\t\t}, 1000);\r\n\t} else {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t}, 1000);\r\n\t}\r\n} */\n_s(Player, \"m+x88ojoJh4Gwn/tI+XslRs5gEQ=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","drawACard","Player","deck","id","index","isBot","unoCall","_s","playerDeck","setPlayerDeck","botLogic","numBotCards","amtCards","i","isValid","playCard","drawStack","stackAmt","setGameState","prev","handleRotatePlayers","rotatePlayers","gameTurn","_c","$RefreshReg$"],"sources":["C:/Users/hjohnston/OneDrive - Neumont College of Computer Science/Documents/GitHub/React_Uno/react-uno/src/Components/Players.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { drawACard } from './Deck';\r\n\r\nfunction Player({ deck, id, index, isBot, unoCall }) {\r\n  const [playerDeck, setPlayerDeck] = useState(deck);\r\n\r\n  const botLogic = () => {\r\n    let numBotCards = playerDeck.amtCards;\r\n\r\n    // Bot behavior\r\n    for (let i = 0; i < numBotCards; i++) {\r\n      if (playerDeck.isValid(i)) {\r\n        if (playerDeck.amtCards === 2) {\r\n          unoCall(true);\r\n        }\r\n        playerDeck.playCard(i);\r\n        setPlayerDeck({ ...playerDeck });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Draw a card if the draw stack is not empty\r\n    if (drawStack.stackAmt !== 0) {\r\n      drawACard();\r\n    } else {\r\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\r\n        drawACard();\r\n      }\r\n    }\r\n\r\n    setGameState((prev) => ({ ...prev }));\r\n  };\r\n\r\n  const handleRotatePlayers = () => {\r\n    rotatePlayers();\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      gameTurn,\r\n    }));\r\n  };\r\n\r\n}\r\n\r\n// not originally here from index.js(game.js)\r\n/* export function play(players, gameTurn) {\r\n\tif (players[gameTurn].isBot) {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t\tplayers[gameTurn].botLogic();\r\n\t\t}, 1000);\r\n\t} else {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t}, 1000);\r\n\t}\r\n} */ \r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,QAAQ;AAElC,SAASC,MAAMA,CAAC;EAAEC,IAAI;EAAEC,EAAE;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAACI,IAAI,CAAC;EAElD,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIC,WAAW,GAAGH,UAAU,CAACI,QAAQ;;IAErC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,EAAEE,CAAC,EAAE,EAAE;MACpC,IAAIL,UAAU,CAACM,OAAO,CAACD,CAAC,CAAC,EAAE;QACzB,IAAIL,UAAU,CAACI,QAAQ,KAAK,CAAC,EAAE;UAC7BN,OAAO,CAAC,IAAI,CAAC;QACf;QACAE,UAAU,CAACO,QAAQ,CAACF,CAAC,CAAC;QACtBJ,aAAa,CAAC;UAAE,GAAGD;QAAW,CAAC,CAAC;QAChC;MACF;IACF;;IAEA;IACA,IAAIQ,SAAS,CAACC,QAAQ,KAAK,CAAC,EAAE;MAC5BjB,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACL,OAAO,CAACQ,UAAU,CAACO,QAAQ,CAACP,UAAU,CAACI,QAAQ,GAAG,CAAC,CAAC,EAAE;QACpDZ,SAAS,CAAC,CAAC;MACb;IACF;IAEAkB,YAAY,CAAEC,IAAI,KAAM;MAAE,GAAGA;IAAK,CAAC,CAAC,CAAC;EACvC,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCC,aAAa,CAAC,CAAC;IACfH,YAAY,CAAEC,IAAI,KAAM;MACtB,GAAGA,IAAI;MACPG;IACF,CAAC,CAAC,CAAC;EACL,CAAC;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBAf,EAAA,CAzCSN,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}