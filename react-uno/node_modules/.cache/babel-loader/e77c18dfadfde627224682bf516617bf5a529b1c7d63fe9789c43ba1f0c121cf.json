{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { drawACard, drawStack, gameDirection } from './Deck';\nimport { gameTurn, players, rotatePlayers } from './Game';\nexport function Players() {\n  _s();\n  const [gameState, setGameState] = useState({\n    players,\n    gameTurn,\n    drawStack\n  });\n  const botLogic = () => {\n    let numBotCards = playerDeck.amtCards;\n\n    // Bot behavior\n    for (let i = 0; i < numBotCards; i++) {\n      if (playerDeck.isValid(i)) {\n        if (playerDeck.amtCards === 2) {\n          unoCall(true);\n        }\n        playerDeck.playCard(i);\n        setPlayerDeck({\n          ...playerDeck\n        });\n        return;\n      }\n    }\n\n    // Draw a card if the draw stack is not empty\n    if (drawStack.stackAmt !== 0) {\n      drawACard();\n    } else {\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\n        drawACard();\n      }\n    }\n    setGameState(prev => ({\n      ...prev\n    }));\n  };\n  const handleRotatePlayers = () => {\n    rotatePlayers();\n    setGameState(prev => ({\n      ...prev,\n      gameTurn\n    }));\n  };\n}\n\n// not originally here from index.js(game.js)\n/* export function play(players, gameTurn) {\r\n\tif (players[gameTurn].isBot) {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t\tplayers[gameTurn].botLogic();\r\n\t\t}, 1000);\r\n\t} else {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t}, 1000);\r\n\t}\r\n} */\n_s(Players, \"qBD5tqPqR4y5iBxkW1PsrgRdDWo=\");\n_c = Players;\nvar _c;\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"names":["React","useState","drawACard","drawStack","gameDirection","gameTurn","players","rotatePlayers","Players","_s","gameState","setGameState","botLogic","numBotCards","playerDeck","amtCards","i","isValid","unoCall","playCard","setPlayerDeck","stackAmt","prev","handleRotatePlayers","_c","$RefreshReg$"],"sources":["C:/Users/hjohnston/OneDrive - Neumont College of Computer Science/Documents/GitHub/React_Uno/react-uno/src/Components/Players.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { drawACard, drawStack, gameDirection } from './Deck';\r\nimport { gameTurn, players, rotatePlayers } from './Game';\r\n\r\nexport function Players() {\r\n  const [gameState, setGameState] = useState({\r\n    players,\r\n    gameTurn,\r\n    drawStack,\r\n  });\r\n\r\n  const botLogic = () => {\r\n    let numBotCards = playerDeck.amtCards;\r\n\r\n    // Bot behavior\r\n    for (let i = 0; i < numBotCards; i++) {\r\n      if (playerDeck.isValid(i)) {\r\n        if (playerDeck.amtCards === 2) {\r\n          unoCall(true);\r\n        }\r\n        playerDeck.playCard(i);\r\n        setPlayerDeck({ ...playerDeck });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Draw a card if the draw stack is not empty\r\n    if (drawStack.stackAmt !== 0) {\r\n      drawACard();\r\n    } else {\r\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\r\n        drawACard();\r\n      }\r\n    }\r\n\r\n    setGameState((prev) => ({ ...prev }));\r\n  };\r\n\r\n  const handleRotatePlayers = () => {\r\n    rotatePlayers();\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      gameTurn,\r\n    }));\r\n  };\r\n\r\n}\r\n\r\n// not originally here from index.js(game.js)\r\n/* export function play(players, gameTurn) {\r\n\tif (players[gameTurn].isBot) {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t\tplayers[gameTurn].botLogic();\r\n\t\t}, 1000);\r\n\t} else {\r\n\t\tsetTimeout(function () {\r\n\t\t\tfor (let i = 0; i < players.length; i++) {\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById(players[i].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t\t.childNodes[0].classList.remove(\"activePlayer\");\r\n\t\t\t}\r\n\t\t\tdocument\r\n\t\t\t\t.getElementById(players[gameTurn].playerDeck.hand.id + \"ID\")\r\n\t\t\t\t.childNodes[0].classList.add(\"activePlayer\");\r\n\t\t}, 1000);\r\n\t}\r\n} */ \r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,SAAS,EAAEC,aAAa,QAAQ,QAAQ;AAC5D,SAASC,QAAQ,EAAEC,OAAO,EAAEC,aAAa,QAAQ,QAAQ;AAEzD,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IACzCK,OAAO;IACPD,QAAQ;IACRF;EACF,CAAC,CAAC;EAEF,MAAMS,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIC,WAAW,GAAGC,UAAU,CAACC,QAAQ;;IAErC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;MACpC,IAAIF,UAAU,CAACG,OAAO,CAACD,CAAC,CAAC,EAAE;QACzB,IAAIF,UAAU,CAACC,QAAQ,KAAK,CAAC,EAAE;UAC7BG,OAAO,CAAC,IAAI,CAAC;QACf;QACAJ,UAAU,CAACK,QAAQ,CAACH,CAAC,CAAC;QACtBI,aAAa,CAAC;UAAE,GAAGN;QAAW,CAAC,CAAC;QAChC;MACF;IACF;;IAEA;IACA,IAAIX,SAAS,CAACkB,QAAQ,KAAK,CAAC,EAAE;MAC5BnB,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACL,OAAO,CAACY,UAAU,CAACK,QAAQ,CAACL,UAAU,CAACC,QAAQ,GAAG,CAAC,CAAC,EAAE;QACpDb,SAAS,CAAC,CAAC;MACb;IACF;IAEAS,YAAY,CAAEW,IAAI,KAAM;MAAE,GAAGA;IAAK,CAAC,CAAC,CAAC;EACvC,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChChB,aAAa,CAAC,CAAC;IACfI,YAAY,CAAEW,IAAI,KAAM;MACtB,GAAGA,IAAI;MACPjB;IACF,CAAC,CAAC,CAAC;EACL,CAAC;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBAI,EAAA,CA7CgBD,OAAO;AAAAgB,EAAA,GAAPhB,OAAO;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}