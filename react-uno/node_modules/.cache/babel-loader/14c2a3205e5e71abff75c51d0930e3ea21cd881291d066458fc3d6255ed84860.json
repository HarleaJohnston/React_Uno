{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hjohnston\\\\OneDrive - Neumont College of Computer Science\\\\Documents\\\\GitHub\\\\React_Uno\\\\react-uno\\\\src\\\\Components\\\\Players.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { drawACard } from './Deck';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Player({\n  deck,\n  id,\n  index,\n  isBot,\n  unoCall\n}) {\n  _s();\n  const [playerDeck, setPlayerDeck] = useState(deck);\n  const botLogic = () => {\n    let numBotCards = playerDeck.amtCards;\n\n    // Bot behavior\n    for (let i = 0; i < numBotCards; i++) {\n      if (playerDeck.isValid(i)) {\n        if (playerDeck.amtCards === 2) {\n          // Assuming 'unoCall' is a state variable or should be set using a function\n          // This logic might need to be adjusted based on how 'unoCall' is managed in your app\n          unoCall(true);\n        }\n        playerDeck.playCard(i);\n        setPlayerDeck({\n          ...playerDeck\n        });\n        return;\n      }\n    }\n\n    // Draw a card if the draw stack is not empty\n    if (drawStack.stackAmt !== 0) {\n      drawACard();\n    } else {\n      // Draw a card and check if it is a match. Will break loop if it hits a limit to prevent infinite decks.\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\n        drawACard();\n      }\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Your JSX for displaying player information, if needed\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Player ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// Assuming these are global variables\n_s(Player, \"m+x88ojoJh4Gwn/tI+XslRs5gEQ=\");\n_c = Player;\nlet gameTurn = 0;\nlet gameDirection = 1;\nlet drawStack = {\n  stackAmt: 0\n};\nfunction rotatePlayers(players) {\n  gameTurn = gameTurn + gameDirection;\n  if (gameTurn === players.length) {\n    gameTurn = 0;\n  } else if (gameTurn < 0) {\n    gameTurn = players.length - 1;\n  }\n}\nexport { Player, rotatePlayers };\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","drawACard","jsxDEV","_jsxDEV","Player","deck","id","index","isBot","unoCall","_s","playerDeck","setPlayerDeck","botLogic","numBotCards","amtCards","i","isValid","playCard","drawStack","stackAmt","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","gameTurn","gameDirection","rotatePlayers","players","length","$RefreshReg$"],"sources":["C:/Users/hjohnston/OneDrive - Neumont College of Computer Science/Documents/GitHub/React_Uno/react-uno/src/Components/Players.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { drawACard } from './Deck';\r\n\r\nfunction Player({ deck, id, index, isBot, unoCall }) {\r\n  const [playerDeck, setPlayerDeck] = useState(deck);\r\n\r\n  const botLogic = () => {\r\n    let numBotCards = playerDeck.amtCards;\r\n\r\n    // Bot behavior\r\n    for (let i = 0; i < numBotCards; i++) {\r\n      if (playerDeck.isValid(i)) {\r\n        if (playerDeck.amtCards === 2) {\r\n          // Assuming 'unoCall' is a state variable or should be set using a function\r\n          // This logic might need to be adjusted based on how 'unoCall' is managed in your app\r\n          unoCall(true);\r\n        }\r\n        playerDeck.playCard(i);\r\n        setPlayerDeck({ ...playerDeck });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Draw a card if the draw stack is not empty\r\n    if (drawStack.stackAmt !== 0) {\r\n      drawACard();\r\n    } else {\r\n      // Draw a card and check if it is a match. Will break loop if it hits a limit to prevent infinite decks.\r\n      while (!playerDeck.playCard(playerDeck.amtCards - 1)) {\r\n        drawACard();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // Your JSX for displaying player information, if needed\r\n    <div>\r\n      <p>Player ID: {id}</p>\r\n      {/* Other player information */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Assuming these are global variables\r\nlet gameTurn = 0;\r\nlet gameDirection = 1;\r\nlet drawStack = { stackAmt: 0 };\r\n\r\nfunction rotatePlayers(players) {\r\n  gameTurn = gameTurn + gameDirection;\r\n\r\n  if (gameTurn === players.length) {\r\n    gameTurn = 0;\r\n  } else if (gameTurn < 0) {\r\n    gameTurn = players.length - 1;\r\n  }\r\n}\r\n\r\nexport { Player, rotatePlayers };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,MAAMA,CAAC;EAAEC,IAAI;EAAEC,EAAE;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAACM,IAAI,CAAC;EAElD,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIC,WAAW,GAAGH,UAAU,CAACI,QAAQ;;IAErC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,EAAEE,CAAC,EAAE,EAAE;MACpC,IAAIL,UAAU,CAACM,OAAO,CAACD,CAAC,CAAC,EAAE;QACzB,IAAIL,UAAU,CAACI,QAAQ,KAAK,CAAC,EAAE;UAC7B;UACA;UACAN,OAAO,CAAC,IAAI,CAAC;QACf;QACAE,UAAU,CAACO,QAAQ,CAACF,CAAC,CAAC;QACtBJ,aAAa,CAAC;UAAE,GAAGD;QAAW,CAAC,CAAC;QAChC;MACF;IACF;;IAEA;IACA,IAAIQ,SAAS,CAACC,QAAQ,KAAK,CAAC,EAAE;MAC5BnB,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACL;MACA,OAAO,CAACU,UAAU,CAACO,QAAQ,CAACP,UAAU,CAACI,QAAQ,GAAG,CAAC,CAAC,EAAE;QACpDd,SAAS,CAAC,CAAC;MACb;IACF;EACF,CAAC;EAED;IAAA;IACE;IACAE,OAAA;MAAAkB,QAAA,eACElB,OAAA;QAAAkB,QAAA,GAAG,aAAW,EAACf,EAAE;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnB;EAAC;AAEV;;AAEA;AAAAf,EAAA,CAxCSN,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AAyCf,IAAIuB,QAAQ,GAAG,CAAC;AAChB,IAAIC,aAAa,GAAG,CAAC;AACrB,IAAIT,SAAS,GAAG;EAAEC,QAAQ,EAAE;AAAE,CAAC;AAE/B,SAASS,aAAaA,CAACC,OAAO,EAAE;EAC9BH,QAAQ,GAAGA,QAAQ,GAAGC,aAAa;EAEnC,IAAID,QAAQ,KAAKG,OAAO,CAACC,MAAM,EAAE;IAC/BJ,QAAQ,GAAG,CAAC;EACd,CAAC,MAAM,IAAIA,QAAQ,GAAG,CAAC,EAAE;IACvBA,QAAQ,GAAGG,OAAO,CAACC,MAAM,GAAG,CAAC;EAC/B;AACF;AAEA,SAAS3B,MAAM,EAAEyB,aAAa;AAAG,IAAAH,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}